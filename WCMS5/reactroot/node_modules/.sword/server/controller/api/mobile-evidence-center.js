"use strict";

exports.__esModule = true;
exports.default = void 0;

var _dec, _dec2, _class, _class2;

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

const {
  get,
  controller
} = sword.Decorator;
let mobileEvidenceCenter = (_dec = controller('/api/mobile-evidence-center'), _dec2 = get('/alarminfo'), _dec(_class = (_class2 = class mobileEvidenceCenter extends sword.Controller {
  async alarminfo() {
    try {
      const data = await sword.service('mobile-evidence-center.mobileEvidenceCenter')(this.query);

      if (data.errorcode === 200) {
        this.success(data.result);
      } else {
        throw new Error(`errorcode != 200, errorcode=${data.errorcode}`);
      }
    } catch (error) {
      sword.logger.error(error);
      const json = {
        code: 202,
        data: []
      };
      this.fail(json);
    }
  }

}, (_applyDecoratedDescriptor(_class2.prototype, "alarminfo", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "alarminfo"), _class2.prototype)), _class2)) || _class);
var _default = mobileEvidenceCenter;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=mobile-evidence-center.js.map