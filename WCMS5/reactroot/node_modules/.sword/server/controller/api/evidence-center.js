"use strict";

exports.__esModule = true;
exports.default = void 0;

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _class, _class2;

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

const {
  get,
  post,
  controller
} = sword.Decorator;

const commonFun = require('../../utils/commonFun.js');

let evidenceCenter = (_dec = controller('/api/evidence-center'), _dec2 = get('/subserverinfo'), _dec3 = get('/detail'), _dec4 = post('/send-email'), _dec5 = post('/save-evidence'), _dec6 = get('/map-detail'), _dec7 = get('/alarm-status'), _dec8 = post('/downloadUrl'), _dec9 = get('/driver-list'), _dec10 = get('/delete-pack'), _dec(_class = (_class2 = class evidenceCenter extends sword.Controller {
  async getSubserverInfo() {
    try {
      const data = await sword.service('evidence-center.evidenceSubServerInfo')(this.query);

      if (data.errorcode === 200) {
        this.success(data.data);
      } else {
        throw new Error(`errorcode != 200, errorcode=${data.errorcode}`);
      }
    } catch (e) {
      sword.logger.error(e);
      const json = {
        code: 202,
        data: []
      };
      this.fail(json);
    }
  }

  async detail() {
    try {
      const data = await sword.service('evidence-center.evidenceCenterDetail')(this.query);

      if (data.errorcode === 200) {
        this.success(data.result);
      } else {
        throw new Error(`errorcode != 200, errorcode=${data.errorcode}`);
      }
    } catch (e) {
      sword.logger.error(e);
      const json = {
        code: 202,
        data: []
      };
      this.fail(json);
    }
  }

  async sendEmail() {
    try {
      const reqData = this.request.body;
      reqData.content = decodeURI(reqData.content);
      const data = await sword.service('evidence-center.evidenceCenterSendEmail')(reqData);

      if (data.errorcode === 200) {
        this.success(data.result);
      } else {
        throw new Error(`errorcode != 200, errorcode=${data.errorcode}`);
      }
    } catch (e) {
      sword.logger.error(e);
      const json = {
        code: 202,
        data: false
      };
      this.fail(json);
    }
  }

  async saveEvidence() {
    try {
      const data = await sword.service('evidence-center.saveEvidence')(this.request.body);

      if (data.errorcode === 200 && data.data.result) {
        this.success(true);
      } else {
        throw new Error(`errorcode != 200, errorcode=${data.errorcode}`);
      }
    } catch (e) {
      sword.logger.error(e);
      const json = {
        code: 202,
        data: []
      };
      this.fail(json);
    }
  }

  async mapDetail() {
    try {
      const data = await sword.service('evidence-center.evidenceCenterRelatedgpsalarm')(this.query);

      if (data.errorcode === 200) {
        this.success(data.result);
      } else {
        throw new Error(`errorcode != 200, errorcode=${data.errorcode}`);
      }
    } catch (e) {
      sword.logger.error(e);
      const json = {
        code: 202,
        data: []
      };
      this.fail(json);
    }
  }

  async alarmStatus() {
    try {
      const data = await sword.service('evidence-center.evidenceCenterAlarmStatus')(this.query);

      if (data.errorcode === 200) {
        this.success(data.result);
      } else {
        throw new Error(`errorcode != 200, errorcode=${data.errorcode}`);
      }
    } catch (e) {
      sword.logger.error(e);
      const json = {
        code: 202,
        data: []
      };
      this.fail(json);
    }
  }

  async downloadUrl() {
    try {
      const {
        body
      } = this.request;
      let token = '';
      const cookieName = commonFun.getUserCookierName();
      const cookier = this.ctx.cookies.get(cookieName);

      if (cookier) {
        const cookieObj = commonFun.base642object(cookier);
        token = commonFun.getWcms4Token(cookieObj.uid, cookieObj.rid);
      } else if (body.rid && body.uid) {
        token = commonFun.getWcms4Token(body.uid, body.rid);
      } else if (body.token) {
        token = body.token;
      }

      const reqBody = {
        data: [{
          type: 'd-e-f',
          msg: '',
          source: 1,
          time: commonFun.getNowDateTime(),
          terid: ''
        }],
        key: token
      };
      await sword.service('evidence-center.evidenceCenterLogDownload')(reqBody);
      const rs = await sword.service('evidence-center.evidenceCenterGetDownloadUrl')(body);
      const filePath = rs.data.path;

      if (rs.errorcode === 200) {
        this.success(filePath);
      } else {
        throw new Error(`errorcode != 200, errorcode=${rs.errorcode}`);
      }
    } catch (e) {
      const json = {
        code: 202,
        data: false,
        errorcode: e
      };
      this.fail(json);
    }
  }

  async driverList() {
    try {
      const data = await sword.service('evidence-center.getDriverNameList')(this.query);

      if (data.errorcode === 200) {
        this.success(data.data.driver);
      } else {
        throw new Error(`errorcode != 200, errorcode=${data.errorcode}`);
      }
    } catch (e) {
      sword.logger.error(e);
      const json = {
        code: 202,
        data: [],
        errorcode: e
      };
      this.fail(json);
    }
  }

  async deletePack() {
    try {
      const data = await sword.service('evidence-center.deletePack')(this.query);

      if (data.errorcode === 200) {
        this.success(data.result);
      } else {
        throw new Error(`errorcode != 200, errorcode=${data.errorcode}`);
      }
    } catch (e) {
      sword.logger.error(e);
      const json = {
        code: 202,
        data: [],
        errorcode: e
      };
      this.fail(json);
    }
  }

}, (_applyDecoratedDescriptor(_class2.prototype, "getSubserverInfo", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "getSubserverInfo"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "detail", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "detail"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "sendEmail", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "sendEmail"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "saveEvidence", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "saveEvidence"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "mapDetail", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "mapDetail"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "alarmStatus", [_dec7], Object.getOwnPropertyDescriptor(_class2.prototype, "alarmStatus"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "downloadUrl", [_dec8], Object.getOwnPropertyDescriptor(_class2.prototype, "downloadUrl"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "driverList", [_dec9], Object.getOwnPropertyDescriptor(_class2.prototype, "driverList"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "deletePack", [_dec10], Object.getOwnPropertyDescriptor(_class2.prototype, "deletePack"), _class2.prototype)), _class2)) || _class);
var _default = evidenceCenter;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=evidence-center.js.map