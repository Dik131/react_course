"use strict";

exports.__esModule = true;
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

const {
  get,
  put,
  controller
} = sword.Decorator;

const SYSTEM_DATA_DIR = _path.default.join(sword.ROOT_PATH, 'system-data');

function getLanguageTypes() {
  const typeDir = _path.default.join(SYSTEM_DATA_DIR, 'locales', 'types');

  const files = _fs.default.readdirSync(typeDir);

  files.sort((a, b) => a.localeCompare(b));
  const types = [];
  files.forEach(fileName => {
    if (_path.default.extname(fileName) === '.json') {
      types.push(_path.default.basename(fileName, '.json'));
    }
  });
  return types;
}

function getLanguageData(lang) {
  const localeDir = _path.default.join(SYSTEM_DATA_DIR, 'locales', 'types');

  const alarmtypeDir = _path.default.join(SYSTEM_DATA_DIR, 'alarmtype', 'types');

  const handleDir = _path.default.join(SYSTEM_DATA_DIR, 'handlemethod', 'types');

  const titleDir = _path.default.join(SYSTEM_DATA_DIR, 'title', 'types');

  const langeageData = [];
  const langList = getLanguageTypes();
  lang = langList.includes(lang) ? lang : sword.config('lang');

  const filePathLocale = _path.default.join(localeDir, `${lang}.json`);

  const filePathAlarmtype = _path.default.join(alarmtypeDir, `${lang}.json`);

  const filePathHandleMethod = _path.default.join(handleDir, `${lang}.json`);

  const filePathTitle = _path.default.join(titleDir, `${lang}.json`);

  const jsonStrLocale = _fs.default.readFileSync(filePathLocale).toString();

  const jsonStrAlarmtype = _fs.default.readFileSync(filePathAlarmtype).toString();

  const jsonStrHandleMethod = _fs.default.readFileSync(filePathHandleMethod).toString();

  const jsonStrTitle = _fs.default.readFileSync(filePathTitle).toString();

  langeageData.push({
    type: lang,
    langData: JSON.parse(jsonStrLocale),
    alarmtypeData: JSON.parse(jsonStrAlarmtype),
    handleMethodData: JSON.parse(jsonStrHandleMethod),
    titleData: JSON.parse(jsonStrTitle)
  });
  return langeageData;
}

function saveLocales(locales) {
  locales.forEach(item => {
    const filePath = _path.default.join(SYSTEM_DATA_DIR, 'locales', 'types', `${item.type}.json`);

    const jsonStr = JSON.stringify(item.data, null, 4);

    _fs.default.writeFileSync(filePath, jsonStr);
  });
}

let Test = (_dec = controller('/api/system-setting'), _dec2 = get('/language/type'), _dec3 = get('/language/resources'), _dec4 = get('/config'), _dec5 = put('/config'), _dec6 = get('/wcms5Config'), _dec(_class = (_class2 = class Test extends sword.Controller {
  getLanguageTypes() {
    const types = getLanguageTypes();

    const codeFilePath = _path.default.join(SYSTEM_DATA_DIR, 'locales', 'list.json');

    const listJsonStr = _fs.default.readFileSync(codeFilePath);

    const listJson = JSON.parse(listJsonStr);
    const result = types.map(key => ({
      code: key,
      name: listJson[key]
    }));
    this.success(result);
  }

  getLanguageResources() {
    const json = {
      type: '',
      i18nextData: {},
      alarmtypeData: {},
      handleMethodData: {},
      titleData: {}
    };

    try {
      const {
        lang
      } = this.query;
      const langeageData = getLanguageData(lang);
      langeageData.forEach(item => {
        json.type = item.type;
        json.i18nextData[item.type] = {
          translation: item.langData
        };
        json.alarmtypeData[item.type] = item.alarmtypeData;
        json.handleMethodData[item.type] = item.handleMethodData;
        json.titleData[item.type] = item.titleData;
      });
      this.success(json);
    } catch (e) {
      sword.logger.error(e);
      this.success(json);
    }
  }

  async getSystemConfig() {
    const data = await sword.service('system-setting.getSystemConfig')();
    this.success(data);
  }

  async editSystemConfig() {
    const data = await sword.service('system-setting.editSystemConfig')(this.request.body);
    this.success(data);
  }

  async editWcms5SystemConfig() {
    const dirArr = SYSTEM_DATA_DIR.split(_path.default.sep);
    dirArr.splice(dirArr.length - 2, dirArr.length - 1);
    const wcms5Root = dirArr.join(_path.default.sep);

    const appPath = _path.default.join(wcms5Root, 'root', 'config', 'app.json');

    let appJson = '{"port":"12056"}';

    if (_fs.default.existsSync(appPath)) {
      appJson = _fs.default.readFileSync(appPath);
    }

    const data = JSON.parse(appJson);
    this.success(data.port);
  }

}, (_applyDecoratedDescriptor(_class2.prototype, "getLanguageTypes", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "getLanguageTypes"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getLanguageResources", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "getLanguageResources"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "getSystemConfig", [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, "getSystemConfig"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "editSystemConfig", [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, "editSystemConfig"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "editWcms5SystemConfig", [_dec6], Object.getOwnPropertyDescriptor(_class2.prototype, "editWcms5SystemConfig"), _class2.prototype)), _class2)) || _class);
var _default = Test;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=system-setting.js.map