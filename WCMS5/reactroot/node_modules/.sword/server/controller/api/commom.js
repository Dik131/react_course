"use strict";

exports.__esModule = true;
exports.default = void 0;

var _koaSend = _interopRequireDefault(require("koa-send"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _dec, _dec2, _dec3, _class, _class2;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

const {
  get,
  controller
} = sword.Decorator;

const commonFun = require('../../utils/commonFun.js');

let Common = (_dec = controller('/api/common/download'), _dec2 = get('/'), _dec3 = get('/absolute/view'), _dec(_class = (_class2 = class Common extends sword.Controller {
  async download() {
    const filePath = decodeURIComponent(this.query.dir);
    const key = decodeURIComponent(this.query.key);
    const evidence = decodeURIComponent(this.query.evidence);

    try {
      const targetPath = commonFun.base642String(filePath).replace(/\/|\\/g, _path.default.sep);

      if (_fs.default.existsSync(targetPath)) {
        const fileName = _path.default.basename(targetPath);

        const dirPath = _path.default.dirname(targetPath);

        this.ctx.attachment(targetPath);
        await (0, _koaSend.default)(this.ctx, fileName, {
          root: dirPath
        });

        if (evidence) {
          setTimeout(async () => {
            await sword.service('evidence-center.deletePack')({
              key,
              path: filePath
            });
          }, 30000);
        }
      } else {
        throw `File not found!  filePath:${decodeURIComponent(filePath)}`;
      }
    } catch (e) {
      if (evidence) {
        await sword.service('evidence-center.deletePack')({
          key,
          path: filePath
        });
      }

      sword.logger.error(e);
      const json = {
        code: 202,
        data: false
      };
      this.fail(json);
    }
  }

  async downloadView() {
    try {
      const filePath = decodeURIComponent(this.query.dir);
      const targetPath = commonFun.base642String(filePath).replace(/\/|\\/g, _path.default.sep);

      if (_fs.default.existsSync(targetPath)) {
        const fileName = _path.default.basename(targetPath);

        const dirPath = _path.default.dirname(targetPath);

        this.ctx.set({
          'Accept-Ranges': 'bytes'
        });
        await (0, _koaSend.default)(this.ctx, fileName, {
          root: dirPath,
          gzip: false
        });
      } else {
        throw `File not found!  filePath:${decodeURIComponent(filePath)}`;
      }
    } catch (e) {
      sword.logger.error(e);
      const json = {
        code: 202,
        data: false
      };
      this.fail(json);
    }
  }

}, (_applyDecoratedDescriptor(_class2.prototype, "download", [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, "download"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "downloadView", [_dec3], Object.getOwnPropertyDescriptor(_class2.prototype, "downloadView"), _class2.prototype)), _class2)) || _class);
var _default = Common;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=commom.js.map